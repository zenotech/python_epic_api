# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from epiccore.models.data_spec import DataSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DesktopNodeLaunchSpec(BaseModel):
    """
    DesktopNodeLaunchSpec
    """ # noqa: E501
    node_code: Annotated[str, Field(min_length=1, strict=True)] = Field(description="node_code of the node type to launch. Valid values are obtained from the catalog/desktop/ endpoint")
    runtime: Annotated[int, Field(strict=True, ge=1)] = Field(description="Runtime in hours to run this desktop node for. This is the maximum runtime as the viz node can be stopped earlier and you will only be charged for the elapsed time")
    secure_ip: Optional[StrictBool] = Field(default=False, description="Should we restrict which IPs can connect to this node?")
    ip_address: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="IPv4 Address to restrict connections to this node from")
    invoice_reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=100)]] = Field(default=None, description="Invoice reference - this text will appear on the monthly invoice against this nodes charges")
    data_path: DataSpec
    mount_type: StrictStr = Field(description="How should the data folder be mounted to the desktop. Offline takes a copy of the data and will not be automatically synced back to the data store.")
    project: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=None, description="Project ID to bill this desktop node against")
    __properties: ClassVar[List[str]] = ["node_code", "runtime", "secure_ip", "ip_address", "invoice_reference", "data_path", "mount_type", "project"]

    @field_validator('mount_type')
    def mount_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('online', 'offline'):
            raise ValueError("must be one of enum values ('online', 'offline')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DesktopNodeLaunchSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_path
        if self.data_path:
            _dict['data_path'] = self.data_path.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DesktopNodeLaunchSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "node_code": obj.get("node_code"),
            "runtime": obj.get("runtime"),
            "secure_ip": obj.get("secure_ip") if obj.get("secure_ip") is not None else False,
            "ip_address": obj.get("ip_address"),
            "invoice_reference": obj.get("invoice_reference"),
            "data_path": DataSpec.from_dict(obj.get("data_path")) if obj.get("data_path") is not None else None,
            "mount_type": obj.get("mount_type"),
            "project": obj.get("project")
        })
        return _obj


