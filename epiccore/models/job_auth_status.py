# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from epiccore.models.job_summary import JobSummary
from epiccore.models.user_name import UserName
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobAuthStatus(BaseModel):
    """
    JobAuthStatus
    """ # noqa: E501
    required: Optional[StrictBool] = Field(default=None, description="Is authorisation required for this job?")
    state: Optional[StrictStr] = None
    job: Optional[JobSummary] = None
    user_profile: Optional[UserName] = None
    permissions: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["required", "state", "job", "user_profile", "permissions"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PENDING', 'AUTHORISED', 'REJECTED'):
            raise ValueError("must be one of enum values ('PENDING', 'AUTHORISED', 'REJECTED')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobAuthStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "required",
                "permissions",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of job
        if self.job:
            _dict['job'] = self.job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_profile
        if self.user_profile:
            _dict['user_profile'] = self.user_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobAuthStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "required": obj.get("required"),
            "state": obj.get("state"),
            "job": JobSummary.from_dict(obj.get("job")) if obj.get("job") is not None else None,
            "user_profile": UserName.from_dict(obj.get("user_profile")) if obj.get("user_profile") is not None else None,
            "permissions": obj.get("permissions")
        })
        return _obj


