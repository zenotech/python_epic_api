# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epiccore.configuration import Configuration


class ZenotechLicense(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'license_password': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'license_password': 'license_password'
    }

    def __init__(self, display_name=None, license_password=None, local_vars_configuration=None):  # noqa: E501
        """ZenotechLicense - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._display_name = None
        self._license_password = None
        self.discriminator = None

        self.display_name = display_name
        self.license_password = license_password

    @property
    def display_name(self):
        """Gets the display_name of this ZenotechLicense.  # noqa: E501

        Name to display to user when selecting this license  # noqa: E501

        :return: The display_name of this ZenotechLicense.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ZenotechLicense.

        Name to display to user when selecting this license  # noqa: E501

        :param display_name: The display_name of this ZenotechLicense.  # noqa: E501
        :type display_name: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 1):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def license_password(self):
        """Gets the license_password of this ZenotechLicense.  # noqa: E501

        License password  # noqa: E501

        :return: The license_password of this ZenotechLicense.  # noqa: E501
        :rtype: str
        """
        return self._license_password

    @license_password.setter
    def license_password(self, license_password):
        """Sets the license_password of this ZenotechLicense.

        License password  # noqa: E501

        :param license_password: The license_password of this ZenotechLicense.  # noqa: E501
        :type license_password: str
        """
        if self.local_vars_configuration.client_side_validation and license_password is None:  # noqa: E501
            raise ValueError("Invalid value for `license_password`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                license_password is not None and len(license_password) < 1):
            raise ValueError("Invalid value for `license_password`, length must be greater than or equal to `1`")  # noqa: E501

        self._license_password = license_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZenotechLicense):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ZenotechLicense):
            return True

        return self.to_dict() != other.to_dict()
