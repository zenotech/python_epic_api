# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool
from pydantic import Field
from typing_extensions import Annotated
from epiccore.models.cluster_node_config import ClusterNodeConfig
from epiccore.models.sla import SLA
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BatchQueueDetails(BaseModel):
    """
    BatchQueueDetails
    """ # noqa: E501
    queue_code: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=100)]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = None
    cluster_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=100)]] = None
    max_runtime: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    max_allocation: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    reported_avail_tasks: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    reported_max_tasks: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    sla: SLA
    maintenance_mode: Optional[StrictBool] = None
    resource_config: ClusterNodeConfig
    supports_local_submission: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["queue_code", "name", "description", "cluster_name", "max_runtime", "max_allocation", "reported_avail_tasks", "reported_max_tasks", "sla", "maintenance_mode", "resource_config", "supports_local_submission"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BatchQueueDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "cluster_name",
                "maintenance_mode",
                "supports_local_submission",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sla
        if self.sla:
            _dict['sla'] = self.sla.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_config
        if self.resource_config:
            _dict['resource_config'] = self.resource_config.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if reported_avail_tasks (nullable) is None
        # and model_fields_set contains the field
        if self.reported_avail_tasks is None and "reported_avail_tasks" in self.model_fields_set:
            _dict['reported_avail_tasks'] = None

        # set to None if reported_max_tasks (nullable) is None
        # and model_fields_set contains the field
        if self.reported_max_tasks is None and "reported_max_tasks" in self.model_fields_set:
            _dict['reported_max_tasks'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BatchQueueDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "queue_code": obj.get("queue_code"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "cluster_name": obj.get("cluster_name"),
            "max_runtime": obj.get("max_runtime"),
            "max_allocation": obj.get("max_allocation"),
            "reported_avail_tasks": obj.get("reported_avail_tasks"),
            "reported_max_tasks": obj.get("reported_max_tasks"),
            "sla": SLA.from_dict(obj.get("sla")) if obj.get("sla") is not None else None,
            "maintenance_mode": obj.get("maintenance_mode"),
            "resource_config": ClusterNodeConfig.from_dict(obj.get("resource_config")) if obj.get("resource_config") is not None else None,
            "supports_local_submission": obj.get("supports_local_submission")
        })
        return _obj


