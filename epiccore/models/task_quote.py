# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from typing_extensions import Annotated
from epiccore.models.discount import Discount
from epiccore.models.iaas_cost import IaasCost
from epiccore.models.service_charge import ServiceCharge
from epiccore.models.software_cost import SoftwareCost
from epiccore.models.tax import Tax
from epiccore.models.total1 import Total1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TaskQuote(BaseModel):
    """
    List of job quotes for individual tasks in this request
    """ # noqa: E501
    reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=25)]] = Field(default=None, description="The reference given in the quote request, to help you identify this task.")
    queue_code: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The Queue code of the queue for this quote")
    iaas_cost: Optional[IaasCost] = None
    software_cost: Optional[SoftwareCost] = None
    service_charge: Optional[ServiceCharge] = None
    discount: Optional[Discount] = None
    tax: Optional[Tax] = None
    total: Optional[Total1] = None
    __properties: ClassVar[List[str]] = ["reference", "queue_code", "iaas_cost", "software_cost", "service_charge", "discount", "tax", "total"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaskQuote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "reference",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of iaas_cost
        if self.iaas_cost:
            _dict['iaas_cost'] = self.iaas_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of software_cost
        if self.software_cost:
            _dict['software_cost'] = self.software_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_charge
        if self.service_charge:
            _dict['service_charge'] = self.service_charge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax
        if self.tax:
            _dict['tax'] = self.tax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TaskQuote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reference": obj.get("reference"),
            "queue_code": obj.get("queue_code"),
            "iaas_cost": IaasCost.from_dict(obj.get("iaas_cost")) if obj.get("iaas_cost") is not None else None,
            "software_cost": SoftwareCost.from_dict(obj.get("software_cost")) if obj.get("software_cost") is not None else None,
            "service_charge": ServiceCharge.from_dict(obj.get("service_charge")) if obj.get("service_charge") is not None else None,
            "discount": Discount.from_dict(obj.get("discount")) if obj.get("discount") is not None else None,
            "tax": Tax.from_dict(obj.get("tax")) if obj.get("tax") is not None else None,
            "total": Total1.from_dict(obj.get("total")) if obj.get("total") is not None else None
        })
        return _obj


