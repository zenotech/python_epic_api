# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Used by the EPIC CLI (https://github.com/zenotech/epic-cli).                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epiccore.configuration import Configuration


class JobLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stdout': 'str',
        'stderr': 'str',
        'app': 'str',
        'last_update': 'str'
    }

    attribute_map = {
        'stdout': 'stdout',
        'stderr': 'stderr',
        'app': 'app',
        'last_update': 'last_update'
    }

    def __init__(self, stdout=None, stderr=None, app=None, last_update=None, local_vars_configuration=None):  # noqa: E501
        """JobLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._stdout = None
        self._stderr = None
        self._app = None
        self._last_update = None
        self.discriminator = None

        if stdout is not None:
            self.stdout = stdout
        if stderr is not None:
            self.stderr = stderr
        if app is not None:
            self.app = app
        if last_update is not None:
            self.last_update = last_update

    @property
    def stdout(self):
        """Gets the stdout of this JobLog.  # noqa: E501


        :return: The stdout of this JobLog.  # noqa: E501
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this JobLog.


        :param stdout: The stdout of this JobLog.  # noqa: E501
        :type stdout: str
        """
        if (self.local_vars_configuration.client_side_validation and
                stdout is not None and len(stdout) < 1):
            raise ValueError("Invalid value for `stdout`, length must be greater than or equal to `1`")  # noqa: E501

        self._stdout = stdout

    @property
    def stderr(self):
        """Gets the stderr of this JobLog.  # noqa: E501


        :return: The stderr of this JobLog.  # noqa: E501
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this JobLog.


        :param stderr: The stderr of this JobLog.  # noqa: E501
        :type stderr: str
        """
        if (self.local_vars_configuration.client_side_validation and
                stderr is not None and len(stderr) < 1):
            raise ValueError("Invalid value for `stderr`, length must be greater than or equal to `1`")  # noqa: E501

        self._stderr = stderr

    @property
    def app(self):
        """Gets the app of this JobLog.  # noqa: E501


        :return: The app of this JobLog.  # noqa: E501
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this JobLog.


        :param app: The app of this JobLog.  # noqa: E501
        :type app: str
        """
        if (self.local_vars_configuration.client_side_validation and
                app is not None and len(app) < 1):
            raise ValueError("Invalid value for `app`, length must be greater than or equal to `1`")  # noqa: E501

        self._app = app

    @property
    def last_update(self):
        """Gets the last_update of this JobLog.  # noqa: E501

        Last time the logs were updated  # noqa: E501

        :return: The last_update of this JobLog.  # noqa: E501
        :rtype: str
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this JobLog.

        Last time the logs were updated  # noqa: E501

        :param last_update: The last_update of this JobLog.  # noqa: E501
        :type last_update: str
        """

        self._last_update = last_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobLog):
            return True

        return self.to_dict() != other.to_dict()
