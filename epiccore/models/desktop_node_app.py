# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epiccore.configuration import Configuration


class DesktopNodeApp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'versions': 'list[DesktopNodeApplicationVersion]',
        'image': 'str',
        'connection_types': 'list[DesktopNodeConnectionType]',
        'node_types': 'list[DesktopNodeType]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'versions': 'versions',
        'image': 'image',
        'connection_types': 'connection_types',
        'node_types': 'node_types'
    }

    def __init__(self, id=None, name=None, description=None, versions=None, image=None, connection_types=None, node_types=None, local_vars_configuration=None):  # noqa: E501
        """DesktopNodeApp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._versions = None
        self._image = None
        self._connection_types = None
        self._node_types = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if versions is not None:
            self.versions = versions
        if image is not None:
            self.image = image
        if connection_types is not None:
            self.connection_types = connection_types
        if node_types is not None:
            self.node_types = node_types

    @property
    def id(self):
        """Gets the id of this DesktopNodeApp.  # noqa: E501


        :return: The id of this DesktopNodeApp.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DesktopNodeApp.


        :param id: The id of this DesktopNodeApp.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DesktopNodeApp.  # noqa: E501

        The name of this application  # noqa: E501

        :return: The name of this DesktopNodeApp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DesktopNodeApp.

        The name of this application  # noqa: E501

        :param name: The name of this DesktopNodeApp.  # noqa: E501
        :type name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this DesktopNodeApp.  # noqa: E501

        Detailed description of this application  # noqa: E501

        :return: The description of this DesktopNodeApp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DesktopNodeApp.

        Detailed description of this application  # noqa: E501

        :param description: The description of this DesktopNodeApp.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 500):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def versions(self):
        """Gets the versions of this DesktopNodeApp.  # noqa: E501

        List of versions for this application  # noqa: E501

        :return: The versions of this DesktopNodeApp.  # noqa: E501
        :rtype: list[DesktopNodeApplicationVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DesktopNodeApp.

        List of versions for this application  # noqa: E501

        :param versions: The versions of this DesktopNodeApp.  # noqa: E501
        :type versions: list[DesktopNodeApplicationVersion]
        """

        self._versions = versions

    @property
    def image(self):
        """Gets the image of this DesktopNodeApp.  # noqa: E501

        URL of image for this application  # noqa: E501

        :return: The image of this DesktopNodeApp.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DesktopNodeApp.

        URL of image for this application  # noqa: E501

        :param image: The image of this DesktopNodeApp.  # noqa: E501
        :type image: str
        """
        if (self.local_vars_configuration.client_side_validation and
                image is not None and len(image) < 1):
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")  # noqa: E501

        self._image = image

    @property
    def connection_types(self):
        """Gets the connection_types of this DesktopNodeApp.  # noqa: E501

        List of connection types available for this application  # noqa: E501

        :return: The connection_types of this DesktopNodeApp.  # noqa: E501
        :rtype: list[DesktopNodeConnectionType]
        """
        return self._connection_types

    @connection_types.setter
    def connection_types(self, connection_types):
        """Sets the connection_types of this DesktopNodeApp.

        List of connection types available for this application  # noqa: E501

        :param connection_types: The connection_types of this DesktopNodeApp.  # noqa: E501
        :type connection_types: list[DesktopNodeConnectionType]
        """

        self._connection_types = connection_types

    @property
    def node_types(self):
        """Gets the node_types of this DesktopNodeApp.  # noqa: E501

        List of nodes types available for this application  # noqa: E501

        :return: The node_types of this DesktopNodeApp.  # noqa: E501
        :rtype: list[DesktopNodeType]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this DesktopNodeApp.

        List of nodes types available for this application  # noqa: E501

        :param node_types: The node_types of this DesktopNodeApp.  # noqa: E501
        :type node_types: list[DesktopNodeType]
        """

        self._node_types = node_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DesktopNodeApp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DesktopNodeApp):
            return True

        return self.to_dict() != other.to_dict()
