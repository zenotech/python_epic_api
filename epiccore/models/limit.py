# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epiccore.configuration import Configuration


class Limit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'team': 'Team',
        'budget': 'Budget',
        'project': 'Project',
        'jobauth': 'JobAuth',
        'id': 'int'
    }

    attribute_map = {
        'team': 'team',
        'budget': 'budget',
        'project': 'project',
        'jobauth': 'jobauth',
        'id': 'id'
    }

    def __init__(self, team=None, budget=None, project=None, jobauth=None, id=None, local_vars_configuration=None):  # noqa: E501
        """Limit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._team = None
        self._budget = None
        self._project = None
        self._jobauth = None
        self._id = None
        self.discriminator = None

        self.team = team
        if budget is not None:
            self.budget = budget
        if project is not None:
            self.project = project
        if jobauth is not None:
            self.jobauth = jobauth
        self.id = id

    @property
    def team(self):
        """Gets the team of this Limit.  # noqa: E501


        :return: The team of this Limit.  # noqa: E501
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Limit.


        :param team: The team of this Limit.  # noqa: E501
        :type team: Team
        """

        self._team = team

    @property
    def budget(self):
        """Gets the budget of this Limit.  # noqa: E501


        :return: The budget of this Limit.  # noqa: E501
        :rtype: Budget
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this Limit.


        :param budget: The budget of this Limit.  # noqa: E501
        :type budget: Budget
        """

        self._budget = budget

    @property
    def project(self):
        """Gets the project of this Limit.  # noqa: E501


        :return: The project of this Limit.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Limit.


        :param project: The project of this Limit.  # noqa: E501
        :type project: Project
        """

        self._project = project

    @property
    def jobauth(self):
        """Gets the jobauth of this Limit.  # noqa: E501


        :return: The jobauth of this Limit.  # noqa: E501
        :rtype: JobAuth
        """
        return self._jobauth

    @jobauth.setter
    def jobauth(self, jobauth):
        """Sets the jobauth of this Limit.


        :param jobauth: The jobauth of this Limit.  # noqa: E501
        :type jobauth: JobAuth
        """

        self._jobauth = jobauth

    @property
    def id(self):
        """Gets the id of this Limit.  # noqa: E501

        Team id for this limit. -1 signifies the user's limits  # noqa: E501

        :return: The id of this Limit.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Limit.

        Team id for this limit. -1 signifies the user's limits  # noqa: E501

        :param id: The id of this Limit.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < -1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Limit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Limit):
            return True

        return self.to_dict() != other.to_dict()
