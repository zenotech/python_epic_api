# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epiccore.configuration import Configuration


class DataLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        's3_obj_key': 'str',
        's3_location': 'str',
        'aws_region': 'str',
        'session_token': 'SessionToken'
    }

    attribute_map = {
        's3_obj_key': 's3_obj_key',
        's3_location': 's3_location',
        'aws_region': 'aws_region',
        'session_token': 'session_token'
    }

    def __init__(self, s3_obj_key=None, s3_location=None, aws_region=None, session_token=None, local_vars_configuration=None):  # noqa: E501
        """DataLocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._s3_obj_key = None
        self._s3_location = None
        self._aws_region = None
        self._session_token = None
        self.discriminator = None

        if s3_obj_key is not None:
            self.s3_obj_key = s3_obj_key
        if s3_location is not None:
            self.s3_location = s3_location
        if aws_region is not None:
            self.aws_region = aws_region
        if session_token is not None:
            self.session_token = session_token

    @property
    def s3_obj_key(self):
        """Gets the s3_obj_key of this DataLocation.  # noqa: E501

        Root path for EPIC data store  # noqa: E501

        :return: The s3_obj_key of this DataLocation.  # noqa: E501
        :rtype: str
        """
        return self._s3_obj_key

    @s3_obj_key.setter
    def s3_obj_key(self, s3_obj_key):
        """Sets the s3_obj_key of this DataLocation.

        Root path for EPIC data store  # noqa: E501

        :param s3_obj_key: The s3_obj_key of this DataLocation.  # noqa: E501
        :type s3_obj_key: str
        """
        if (self.local_vars_configuration.client_side_validation and
                s3_obj_key is not None and len(s3_obj_key) < 1):
            raise ValueError("Invalid value for `s3_obj_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._s3_obj_key = s3_obj_key

    @property
    def s3_location(self):
        """Gets the s3_location of this DataLocation.  # noqa: E501

        S3 Bucket name for EPIC data store  # noqa: E501

        :return: The s3_location of this DataLocation.  # noqa: E501
        :rtype: str
        """
        return self._s3_location

    @s3_location.setter
    def s3_location(self, s3_location):
        """Sets the s3_location of this DataLocation.

        S3 Bucket name for EPIC data store  # noqa: E501

        :param s3_location: The s3_location of this DataLocation.  # noqa: E501
        :type s3_location: str
        """
        if (self.local_vars_configuration.client_side_validation and
                s3_location is not None and len(s3_location) < 1):
            raise ValueError("Invalid value for `s3_location`, length must be greater than or equal to `1`")  # noqa: E501

        self._s3_location = s3_location

    @property
    def aws_region(self):
        """Gets the aws_region of this DataLocation.  # noqa: E501

        The step logs  # noqa: E501

        :return: The aws_region of this DataLocation.  # noqa: E501
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this DataLocation.

        The step logs  # noqa: E501

        :param aws_region: The aws_region of this DataLocation.  # noqa: E501
        :type aws_region: str
        """

        self._aws_region = aws_region

    @property
    def session_token(self):
        """Gets the session_token of this DataLocation.  # noqa: E501


        :return: The session_token of this DataLocation.  # noqa: E501
        :rtype: SessionToken
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this DataLocation.


        :param session_token: The session_token of this DataLocation.  # noqa: E501
        :type session_token: SessionToken
        """

        self._session_token = session_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataLocation):
            return True

        return self.to_dict() != other.to_dict()
