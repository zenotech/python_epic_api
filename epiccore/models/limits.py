# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from typing_extensions import Annotated
from epiccore.models.limit import Limit
from epiccore.models.max_limit import MaxLimit
from epiccore.models.total import Total
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Limits(BaseModel):
    """
    Limits
    """ # noqa: E501
    limits: List[Limit] = Field(description="List of limits for all teams linked to the current user's billing profile")
    max_limit: Optional[MaxLimit] = None
    max_limit_str: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=30)]] = Field(default=None, description="Maximum monthly spend limit for the current user's billing profile as a string in user's display currency")
    total: Optional[Total] = None
    total_str: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=30)]] = Field(default=None, description="Current total monthly spend limit as a string")
    __properties: ClassVar[List[str]] = ["limits", "max_limit", "max_limit_str", "total", "total_str"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Limits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "max_limit_str",
                "total_str",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in limits (list)
        _items = []
        if self.limits:
            for _item in self.limits:
                if _item:
                    _items.append(_item.to_dict())
            _dict['limits'] = _items
        # override the default output from pydantic by calling `to_dict()` of max_limit
        if self.max_limit:
            _dict['max_limit'] = self.max_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Limits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "limits": [Limit.from_dict(_item) for _item in obj.get("limits")] if obj.get("limits") is not None else None,
            "max_limit": MaxLimit.from_dict(obj.get("max_limit")) if obj.get("max_limit") is not None else None,
            "max_limit_str": obj.get("max_limit_str"),
            "total": Total.from_dict(obj.get("total")) if obj.get("total") is not None else None,
            "total_str": obj.get("total_str")
        })
        return _obj


