# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epiccore.configuration import Configuration


class Limits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'limits': 'list[Limit]',
        'max_limit': 'MaxLimit',
        'max_limit_str': 'str',
        'total': 'Total',
        'total_str': 'str'
    }

    attribute_map = {
        'limits': 'limits',
        'max_limit': 'max_limit',
        'max_limit_str': 'max_limit_str',
        'total': 'total',
        'total_str': 'total_str'
    }

    def __init__(self, limits=None, max_limit=None, max_limit_str=None, total=None, total_str=None, local_vars_configuration=None):  # noqa: E501
        """Limits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._limits = None
        self._max_limit = None
        self._max_limit_str = None
        self._total = None
        self._total_str = None
        self.discriminator = None

        self.limits = limits
        if max_limit is not None:
            self.max_limit = max_limit
        if max_limit_str is not None:
            self.max_limit_str = max_limit_str
        if total is not None:
            self.total = total
        if total_str is not None:
            self.total_str = total_str

    @property
    def limits(self):
        """Gets the limits of this Limits.  # noqa: E501

        List of limits for all teams linked to the current user's billing profile  # noqa: E501

        :return: The limits of this Limits.  # noqa: E501
        :rtype: list[Limit]
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this Limits.

        List of limits for all teams linked to the current user's billing profile  # noqa: E501

        :param limits: The limits of this Limits.  # noqa: E501
        :type limits: list[Limit]
        """
        if self.local_vars_configuration.client_side_validation and limits is None:  # noqa: E501
            raise ValueError("Invalid value for `limits`, must not be `None`")  # noqa: E501

        self._limits = limits

    @property
    def max_limit(self):
        """Gets the max_limit of this Limits.  # noqa: E501


        :return: The max_limit of this Limits.  # noqa: E501
        :rtype: MaxLimit
        """
        return self._max_limit

    @max_limit.setter
    def max_limit(self, max_limit):
        """Sets the max_limit of this Limits.


        :param max_limit: The max_limit of this Limits.  # noqa: E501
        :type max_limit: MaxLimit
        """

        self._max_limit = max_limit

    @property
    def max_limit_str(self):
        """Gets the max_limit_str of this Limits.  # noqa: E501

        Maximum monthly spend limit for the current user's billing profile as a string in user's display currency  # noqa: E501

        :return: The max_limit_str of this Limits.  # noqa: E501
        :rtype: str
        """
        return self._max_limit_str

    @max_limit_str.setter
    def max_limit_str(self, max_limit_str):
        """Sets the max_limit_str of this Limits.

        Maximum monthly spend limit for the current user's billing profile as a string in user's display currency  # noqa: E501

        :param max_limit_str: The max_limit_str of this Limits.  # noqa: E501
        :type max_limit_str: str
        """
        if (self.local_vars_configuration.client_side_validation and
                max_limit_str is not None and len(max_limit_str) > 30):
            raise ValueError("Invalid value for `max_limit_str`, length must be less than or equal to `30`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_limit_str is not None and len(max_limit_str) < 1):
            raise ValueError("Invalid value for `max_limit_str`, length must be greater than or equal to `1`")  # noqa: E501

        self._max_limit_str = max_limit_str

    @property
    def total(self):
        """Gets the total of this Limits.  # noqa: E501


        :return: The total of this Limits.  # noqa: E501
        :rtype: Total
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Limits.


        :param total: The total of this Limits.  # noqa: E501
        :type total: Total
        """

        self._total = total

    @property
    def total_str(self):
        """Gets the total_str of this Limits.  # noqa: E501

        Current total monthly spend limit as a string  # noqa: E501

        :return: The total_str of this Limits.  # noqa: E501
        :rtype: str
        """
        return self._total_str

    @total_str.setter
    def total_str(self, total_str):
        """Sets the total_str of this Limits.

        Current total monthly spend limit as a string  # noqa: E501

        :param total_str: The total_str of this Limits.  # noqa: E501
        :type total_str: str
        """
        if (self.local_vars_configuration.client_side_validation and
                total_str is not None and len(total_str) > 30):
            raise ValueError("Invalid value for `total_str`, length must be less than or equal to `30`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                total_str is not None and len(total_str) < 1):
            raise ValueError("Invalid value for `total_str`, length must be greater than or equal to `1`")  # noqa: E501

        self._total_str = total_str

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Limits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Limits):
            return True

        return self.to_dict() != other.to_dict()
