# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epiccore.configuration import Configuration


class DesktopNodeQuote(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node_code': 'str',
        'runtime': 'int'
    }

    attribute_map = {
        'node_code': 'node_code',
        'runtime': 'runtime'
    }

    def __init__(self, node_code=None, runtime=None, local_vars_configuration=None):  # noqa: E501
        """DesktopNodeQuote - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._node_code = None
        self._runtime = None
        self.discriminator = None

        self.node_code = node_code
        self.runtime = runtime

    @property
    def node_code(self):
        """Gets the node_code of this DesktopNodeQuote.  # noqa: E501

        node_code of the node type to launch. Valid values are obtained from the catalog/desktop/ endpoint  # noqa: E501

        :return: The node_code of this DesktopNodeQuote.  # noqa: E501
        :rtype: str
        """
        return self._node_code

    @node_code.setter
    def node_code(self, node_code):
        """Sets the node_code of this DesktopNodeQuote.

        node_code of the node type to launch. Valid values are obtained from the catalog/desktop/ endpoint  # noqa: E501

        :param node_code: The node_code of this DesktopNodeQuote.  # noqa: E501
        :type node_code: str
        """
        if self.local_vars_configuration.client_side_validation and node_code is None:  # noqa: E501
            raise ValueError("Invalid value for `node_code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                node_code is not None and len(node_code) < 1):
            raise ValueError("Invalid value for `node_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._node_code = node_code

    @property
    def runtime(self):
        """Gets the runtime of this DesktopNodeQuote.  # noqa: E501

        Runtime in hours to run this desktop node for. This is the maximum runtime as the viz node can be stopped earlier and you will only be charged for the elapsed time  # noqa: E501

        :return: The runtime of this DesktopNodeQuote.  # noqa: E501
        :rtype: int
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this DesktopNodeQuote.

        Runtime in hours to run this desktop node for. This is the maximum runtime as the viz node can be stopped earlier and you will only be charged for the elapsed time  # noqa: E501

        :param runtime: The runtime of this DesktopNodeQuote.  # noqa: E501
        :type runtime: int
        """
        if self.local_vars_configuration.client_side_validation and runtime is None:  # noqa: E501
            raise ValueError("Invalid value for `runtime`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                runtime is not None and runtime < 1):  # noqa: E501
            raise ValueError("Invalid value for `runtime`, must be a value greater than or equal to `1`")  # noqa: E501

        self._runtime = runtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DesktopNodeQuote):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DesktopNodeQuote):
            return True

        return self.to_dict() != other.to_dict()
