# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epiccore.configuration import Configuration


class DesktopNodeQuote(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'application_version': 'int',
        'node_type': 'int',
        'connection_type': 'int',
        'runtime': 'int'
    }

    attribute_map = {
        'application_version': 'application_version',
        'node_type': 'node_type',
        'connection_type': 'connection_type',
        'runtime': 'runtime'
    }

    def __init__(self, application_version=None, node_type=None, connection_type=None, runtime=None, local_vars_configuration=None):  # noqa: E501
        """DesktopNodeQuote - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._application_version = None
        self._node_type = None
        self._connection_type = None
        self._runtime = None
        self.discriminator = None

        self.application_version = application_version
        self.node_type = node_type
        self.connection_type = connection_type
        self.runtime = runtime

    @property
    def application_version(self):
        """Gets the application_version of this DesktopNodeQuote.  # noqa: E501

        ID of the application_version to launch. Valid values are obtained from the catalog/desktop/ endpoint  # noqa: E501

        :return: The application_version of this DesktopNodeQuote.  # noqa: E501
        :rtype: int
        """
        return self._application_version

    @application_version.setter
    def application_version(self, application_version):
        """Sets the application_version of this DesktopNodeQuote.

        ID of the application_version to launch. Valid values are obtained from the catalog/desktop/ endpoint  # noqa: E501

        :param application_version: The application_version of this DesktopNodeQuote.  # noqa: E501
        :type application_version: int
        """
        if self.local_vars_configuration.client_side_validation and application_version is None:  # noqa: E501
            raise ValueError("Invalid value for `application_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                application_version is not None and application_version < 1):  # noqa: E501
            raise ValueError("Invalid value for `application_version`, must be a value greater than or equal to `1`")  # noqa: E501

        self._application_version = application_version

    @property
    def node_type(self):
        """Gets the node_type of this DesktopNodeQuote.  # noqa: E501

        ID of the node_type. Valid values are obtained from the catalog/desktop/ endpoint  # noqa: E501

        :return: The node_type of this DesktopNodeQuote.  # noqa: E501
        :rtype: int
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this DesktopNodeQuote.

        ID of the node_type. Valid values are obtained from the catalog/desktop/ endpoint  # noqa: E501

        :param node_type: The node_type of this DesktopNodeQuote.  # noqa: E501
        :type node_type: int
        """
        if self.local_vars_configuration.client_side_validation and node_type is None:  # noqa: E501
            raise ValueError("Invalid value for `node_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                node_type is not None and node_type < 1):  # noqa: E501
            raise ValueError("Invalid value for `node_type`, must be a value greater than or equal to `1`")  # noqa: E501

        self._node_type = node_type

    @property
    def connection_type(self):
        """Gets the connection_type of this DesktopNodeQuote.  # noqa: E501

        The connection type to use for the Desktop  # noqa: E501

        :return: The connection_type of this DesktopNodeQuote.  # noqa: E501
        :rtype: int
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this DesktopNodeQuote.

        The connection type to use for the Desktop  # noqa: E501

        :param connection_type: The connection_type of this DesktopNodeQuote.  # noqa: E501
        :type connection_type: int
        """
        if self.local_vars_configuration.client_side_validation and connection_type is None:  # noqa: E501
            raise ValueError("Invalid value for `connection_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                connection_type is not None and connection_type < 1):  # noqa: E501
            raise ValueError("Invalid value for `connection_type`, must be a value greater than or equal to `1`")  # noqa: E501

        self._connection_type = connection_type

    @property
    def runtime(self):
        """Gets the runtime of this DesktopNodeQuote.  # noqa: E501

        Runtime in hours to run this desktop node for. This is the maximum runtime as the viz node can be stopped earlier and you will only be charged for the elapsed time  # noqa: E501

        :return: The runtime of this DesktopNodeQuote.  # noqa: E501
        :rtype: int
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this DesktopNodeQuote.

        Runtime in hours to run this desktop node for. This is the maximum runtime as the viz node can be stopped earlier and you will only be charged for the elapsed time  # noqa: E501

        :param runtime: The runtime of this DesktopNodeQuote.  # noqa: E501
        :type runtime: int
        """
        if self.local_vars_configuration.client_side_validation and runtime is None:  # noqa: E501
            raise ValueError("Invalid value for `runtime`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                runtime is not None and runtime < 1):  # noqa: E501
            raise ValueError("Invalid value for `runtime`, must be a value greater than or equal to `1`")  # noqa: E501

        self._runtime = runtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DesktopNodeQuote):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DesktopNodeQuote):
            return True

        return self.to_dict() != other.to_dict()
