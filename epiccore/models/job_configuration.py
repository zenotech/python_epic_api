# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobConfiguration(BaseModel):
    """
    Job configuration options
    """ # noqa: E501
    upload: Optional[List[StrictStr]] = Field(default=None, description="When should data be uploaded?")
    overwrite_existing: Optional[StrictBool] = Field(default=True, description="Should uploads overwrite existing data files?")
    data_sync_interval: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="How frequently should the data be uploaded back to the EPIC data store?")
    local_submission: Optional[StrictBool] = Field(default=False, description="Is this job being submitted locally?")
    __properties: ClassVar[List[str]] = ["upload", "overwrite_existing", "data_sync_interval", "local_submission"]

    @field_validator('upload')
    def upload_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('complete', 'failure', 'cancel'):
                raise ValueError("each list item must be one of ('complete', 'failure', 'cancel')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "upload": obj.get("upload"),
            "overwrite_existing": obj.get("overwrite_existing") if obj.get("overwrite_existing") is not None else True,
            "data_sync_interval": obj.get("data_sync_interval"),
            "local_submission": obj.get("local_submission") if obj.get("local_submission") is not None else False
        })
        return _obj


