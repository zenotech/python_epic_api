# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from epiccore.models.current_spend import CurrentSpend
from epiccore.models.spend_limit import SpendLimit
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectDetails(BaseModel):
    """
    ProjectDetails
    """ # noqa: E501
    pk: Optional[StrictInt] = None
    project_id: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    description: Optional[StrictStr] = None
    closed: Optional[StrictBool] = None
    all_users: Optional[StrictBool] = None
    authorized_user_profiles: Optional[List[StrictInt]] = None
    has_budget: Optional[StrictBool] = None
    spend_limit: Optional[SpendLimit] = None
    current_spend: Optional[CurrentSpend] = None
    __properties: ClassVar[List[str]] = ["pk", "project_id", "description", "closed", "all_users", "authorized_user_profiles", "has_budget", "spend_limit", "current_spend"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "pk",
                "project_id",
                "has_budget",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of spend_limit
        if self.spend_limit:
            _dict['spend_limit'] = self.spend_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_spend
        if self.current_spend:
            _dict['current_spend'] = self.current_spend.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pk": obj.get("pk"),
            "project_id": obj.get("project_id"),
            "description": obj.get("description"),
            "closed": obj.get("closed"),
            "all_users": obj.get("all_users"),
            "authorized_user_profiles": obj.get("authorized_user_profiles"),
            "has_budget": obj.get("has_budget"),
            "spend_limit": SpendLimit.from_dict(obj.get("spend_limit")) if obj.get("spend_limit") is not None else None,
            "current_spend": CurrentSpend.from_dict(obj.get("current_spend")) if obj.get("current_spend") is not None else None
        })
        return _obj


