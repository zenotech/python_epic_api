# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from epiccore.models.application_configuration_serialiser import ApplicationConfigurationSerialiser
from epiccore.models.environment_variable import EnvironmentVariable
from epiccore.models.template import Template
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SiteConfigurationSerialiser(BaseModel):
    """
    SiteConfigurationSerialiser
    """ # noqa: E501
    application_configuration: ApplicationConfigurationSerialiser
    environment_script: Template
    env_variables: List[EnvironmentVariable]
    created: Optional[datetime] = None
    modified: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["application_configuration", "environment_script", "env_variables", "created", "modified"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SiteConfigurationSerialiser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "created",
                "modified",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_configuration
        if self.application_configuration:
            _dict['application_configuration'] = self.application_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment_script
        if self.environment_script:
            _dict['environment_script'] = self.environment_script.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in env_variables (list)
        _items = []
        if self.env_variables:
            for _item in self.env_variables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['env_variables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SiteConfigurationSerialiser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application_configuration": ApplicationConfigurationSerialiser.from_dict(obj.get("application_configuration")) if obj.get("application_configuration") is not None else None,
            "environment_script": Template.from_dict(obj.get("environment_script")) if obj.get("environment_script") is not None else None,
            "env_variables": [EnvironmentVariable.from_dict(_item) for _item in obj.get("env_variables")] if obj.get("env_variables") is not None else None,
            "created": obj.get("created"),
            "modified": obj.get("modified")
        })
        return _obj


