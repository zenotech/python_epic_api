# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobTaskSpec(BaseModel):
    """
    List of task definitions that make up this job
    """ # noqa: E501
    reference: Annotated[str, Field(min_length=1, strict=True, max_length=25)] = Field(description="A reference to help you identify this task")
    partitions: Annotated[int, Field(strict=True, ge=1)] = Field(description="How many partitions/tasks will this task be submitted as.")
    runtime: Annotated[int, Field(strict=True, ge=1)] = Field(description="Maximum runtime for this task in whole hours.")
    task_distribution: StrictStr = Field(description="How should the partitions be distributed on the HPC cluster")
    tasks_per_device: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="How many tasks should be scheduled per device.")
    hyperthreading: Optional[StrictBool] = Field(default=True, description="Make use of hyperthreaded core where available")
    __properties: ClassVar[List[str]] = ["reference", "partitions", "runtime", "task_distribution", "tasks_per_device", "hyperthreading"]

    @field_validator('task_distribution')
    def task_distribution_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('core', 'socket', 'node', 'device'):
            raise ValueError("must be one of enum values ('core', 'socket', 'node', 'device')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobTaskSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobTaskSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reference": obj.get("reference"),
            "partitions": obj.get("partitions"),
            "runtime": obj.get("runtime"),
            "task_distribution": obj.get("task_distribution"),
            "tasks_per_device": obj.get("tasks_per_device"),
            "hyperthreading": obj.get("hyperthreading") if obj.get("hyperthreading") is not None else True
        })
        return _obj


