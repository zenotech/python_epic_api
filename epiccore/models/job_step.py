# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobStep(BaseModel):
    """
    JobStep
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="jobstep id")
    parent_job: Optional[StrictInt] = Field(default=None, description="The id of the parent job for this step")
    run_if_previous_step_fails: Optional[StrictBool] = Field(default=None, description="Whether this job step will run if the previous step fails")
    step_name: Annotated[str, Field(min_length=1, strict=True, max_length=30)] = Field(description="The name of this job step")
    node_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]] = Field(default=None, description="Number of nodes this job step will run on")
    num_tasks: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]] = Field(default=None, description="Number of tasks that will run for this job step")
    tasks_per_node: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]] = Field(default=None, description="Number of tasks that will run on each node")
    threads_per_task: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]] = Field(default=None, description="Number of threads assigned to each task")
    max_runtime: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]] = Field(default=None, description="Maximum runtime in hours that this job step will run for")
    status: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Status of this jobstep")
    exit_code: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(default=None, description="Unix exit code for this job step")
    start: Optional[datetime] = Field(default=None, description="Time this job step started running")
    end: Optional[datetime] = Field(default=None, description="Time this job step finished running")
    wallclock: Optional[StrictStr] = None
    local_job_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    __properties: ClassVar[List[str]] = ["id", "parent_job", "run_if_previous_step_fails", "step_name", "node_count", "num_tasks", "tasks_per_node", "threads_per_task", "max_runtime", "status", "exit_code", "start", "end", "wallclock", "local_job_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "id",
                "parent_job",
                "wallclock",
            },
            exclude_none=True,
        )
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if exit_code (nullable) is None
        # and model_fields_set contains the field
        if self.exit_code is None and "exit_code" in self.model_fields_set:
            _dict['exit_code'] = None

        # set to None if start (nullable) is None
        # and model_fields_set contains the field
        if self.start is None and "start" in self.model_fields_set:
            _dict['start'] = None

        # set to None if end (nullable) is None
        # and model_fields_set contains the field
        if self.end is None and "end" in self.model_fields_set:
            _dict['end'] = None

        # set to None if wallclock (nullable) is None
        # and model_fields_set contains the field
        if self.wallclock is None and "wallclock" in self.model_fields_set:
            _dict['wallclock'] = None

        # set to None if local_job_id (nullable) is None
        # and model_fields_set contains the field
        if self.local_job_id is None and "local_job_id" in self.model_fields_set:
            _dict['local_job_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "parent_job": obj.get("parent_job"),
            "run_if_previous_step_fails": obj.get("run_if_previous_step_fails"),
            "step_name": obj.get("step_name"),
            "node_count": obj.get("node_count"),
            "num_tasks": obj.get("num_tasks"),
            "tasks_per_node": obj.get("tasks_per_node"),
            "threads_per_task": obj.get("threads_per_task"),
            "max_runtime": obj.get("max_runtime"),
            "status": obj.get("status"),
            "exit_code": obj.get("exit_code"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "wallclock": obj.get("wallclock"),
            "local_job_id": obj.get("local_job_id")
        })
        return _obj


