# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epiccore.configuration import Configuration


class License(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'active': 'bool',
        'display_name': 'str',
        'description': 'str',
        'environment': 'list[EnvVar]',
        'application': 'Application'
    }

    attribute_map = {
        'id': 'id',
        'active': 'active',
        'display_name': 'display_name',
        'description': 'description',
        'environment': 'environment',
        'application': 'application'
    }

    def __init__(self, id=None, active=None, display_name=None, description=None, environment=None, application=None, local_vars_configuration=None):  # noqa: E501
        """License - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._active = None
        self._display_name = None
        self._description = None
        self._environment = None
        self._application = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if active is not None:
            self.active = active
        self.display_name = display_name
        if description is not None:
            self.description = description
        if environment is not None:
            self.environment = environment
        if application is not None:
            self.application = application

    @property
    def id(self):
        """Gets the id of this License.  # noqa: E501


        :return: The id of this License.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this License.


        :param id: The id of this License.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def active(self):
        """Gets the active of this License.  # noqa: E501


        :return: The active of this License.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this License.


        :param active: The active of this License.  # noqa: E501
        :type active: bool
        """

        self._active = active

    @property
    def display_name(self):
        """Gets the display_name of this License.  # noqa: E501


        :return: The display_name of this License.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this License.


        :param display_name: The display_name of this License.  # noqa: E501
        :type display_name: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) > 30):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `30`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 1):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this License.  # noqa: E501


        :return: The description of this License.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this License.


        :param description: The description of this License.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def environment(self):
        """Gets the environment of this License.  # noqa: E501


        :return: The environment of this License.  # noqa: E501
        :rtype: list[EnvVar]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this License.


        :param environment: The environment of this License.  # noqa: E501
        :type environment: list[EnvVar]
        """

        self._environment = environment

    @property
    def application(self):
        """Gets the application of this License.  # noqa: E501


        :return: The application of this License.  # noqa: E501
        :rtype: Application
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this License.


        :param application: The application of this License.  # noqa: E501
        :type application: Application
        """

        self._application = application

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, License):
            return True

        return self.to_dict() != other.to_dict()
