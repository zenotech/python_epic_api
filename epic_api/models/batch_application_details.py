# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Used by the EPIC CLI (https://github.com/zenotech/epic-cli).                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from epic_api.configuration import Configuration


class BatchApplicationDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'product': 'ProductName',
        'permissions': 'str',
        'version': 'str',
        'restricted': 'bool',
        'public': 'bool',
        'supports_cases': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'product': 'product',
        'permissions': 'permissions',
        'version': 'version',
        'restricted': 'restricted',
        'public': 'public',
        'supports_cases': 'supports_cases'
    }

    def __init__(self, id=None, product=None, permissions=None, version=None, restricted=None, public=None, supports_cases=None, local_vars_configuration=None):  # noqa: E501
        """BatchApplicationDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._product = None
        self._permissions = None
        self._version = None
        self._restricted = None
        self._public = None
        self._supports_cases = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.product = product
        if permissions is not None:
            self.permissions = permissions
        if version is not None:
            self.version = version
        if restricted is not None:
            self.restricted = restricted
        if public is not None:
            self.public = public
        if supports_cases is not None:
            self.supports_cases = supports_cases

    @property
    def id(self):
        """Gets the id of this BatchApplicationDetails.  # noqa: E501


        :return: The id of this BatchApplicationDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BatchApplicationDetails.


        :param id: The id of this BatchApplicationDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this BatchApplicationDetails.  # noqa: E501


        :return: The product of this BatchApplicationDetails.  # noqa: E501
        :rtype: ProductName
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this BatchApplicationDetails.


        :param product: The product of this BatchApplicationDetails.  # noqa: E501
        :type: ProductName
        """
        if self.local_vars_configuration.client_side_validation and product is None:  # noqa: E501
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def permissions(self):
        """Gets the permissions of this BatchApplicationDetails.  # noqa: E501


        :return: The permissions of this BatchApplicationDetails.  # noqa: E501
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this BatchApplicationDetails.


        :param permissions: The permissions of this BatchApplicationDetails.  # noqa: E501
        :type: str
        """

        self._permissions = permissions

    @property
    def version(self):
        """Gets the version of this BatchApplicationDetails.  # noqa: E501


        :return: The version of this BatchApplicationDetails.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BatchApplicationDetails.


        :param version: The version of this BatchApplicationDetails.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def restricted(self):
        """Gets the restricted of this BatchApplicationDetails.  # noqa: E501


        :return: The restricted of this BatchApplicationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this BatchApplicationDetails.


        :param restricted: The restricted of this BatchApplicationDetails.  # noqa: E501
        :type: bool
        """

        self._restricted = restricted

    @property
    def public(self):
        """Gets the public of this BatchApplicationDetails.  # noqa: E501


        :return: The public of this BatchApplicationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this BatchApplicationDetails.


        :param public: The public of this BatchApplicationDetails.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def supports_cases(self):
        """Gets the supports_cases of this BatchApplicationDetails.  # noqa: E501


        :return: The supports_cases of this BatchApplicationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._supports_cases

    @supports_cases.setter
    def supports_cases(self, supports_cases):
        """Sets the supports_cases of this BatchApplicationDetails.


        :param supports_cases: The supports_cases of this BatchApplicationDetails.  # noqa: E501
        :type: bool
        """

        self._supports_cases = supports_cases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchApplicationDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchApplicationDetails):
            return True

        return self.to_dict() != other.to_dict()
