# coding: utf-8

"""
    EPIC API

    REST API for interacting with EPIC (https://epic.zenotech.com) services. <br />                             Used by the EPIC CLI (https://github.com/zenotech/epic-cli).                             Please note this API is in BETA and does not yet contain                             all EPIC functionality.  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@zenotech.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import epiccore
from epiccore.models.job_data_binding import JobDataBinding  # noqa: E501
from epiccore.rest import ApiException

class TestJobDataBinding(unittest.TestCase):
    """JobDataBinding unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test JobDataBinding
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = epiccore.models.job_data_binding.JobDataBinding()  # noqa: E501
        if include_optional :
            return JobDataBinding(
                name = '0', 
                spec = epiccore.models.job_spec.JobSpec(
                    application_version = 1, 
                    project = -1, 
                    tasks = [
                        epiccore.models.job_task_spec.JobTaskSpec(
                            reference = '0', 
                            partitions = 1, 
                            runtime = 1, 
                            task_distribution = 'core', 
                            hyperthreading = True, )
                        ], ), 
                app_options = epiccore.models.app_options.App options(), 
                cluster = epiccore.models.job_cluster_spec.JobClusterSpec(
                    queue = 1, ), 
                input_data = epiccore.models.data_spec.DataSpec(
                    path = '0', )
            )
        else :
            return JobDataBinding(
                name = '0',
                spec = epiccore.models.job_spec.JobSpec(
                    application_version = 1, 
                    project = -1, 
                    tasks = [
                        epiccore.models.job_task_spec.JobTaskSpec(
                            reference = '0', 
                            partitions = 1, 
                            runtime = 1, 
                            task_distribution = 'core', 
                            hyperthreading = True, )
                        ], ),
                app_options = epiccore.models.app_options.App options(),
                cluster = epiccore.models.job_cluster_spec.JobClusterSpec(
                    queue = 1, ),
                input_data = epiccore.models.data_spec.DataSpec(
                    path = '0', ),
        )

    def testJobDataBinding(self):
        """Test JobDataBinding"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
